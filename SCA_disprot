%% CORE 0a. Alignment and   structure files 

clear; close all
addpath Functions

% The toolbox includes an alignment of DHFR sequences from the PFAM
% database (accession PF00186), and a structure of one member of the
% protein family (E.coli DHFR, PDB 1RX2) which serves as our reference
% sequence.
names={'tuberculosis_pup'};
alignment_names={'PF05639_full'};
disprot_ids={'tuberculosis_pup'};

for i=1:length(names);
name=char(names(i));
alignment_name=char(alignment_names(i));
disprot_id=char(disprot_ids(i)); 

% CORE 0b. Alignment loading and initial structure based trimming

% We load the alignment, and truncate positions according to our reference
% sequence using the program trunc_al_pdb.m

disp(['Processing ' name '...']);
algn=fastaread(['Inputs/pfam/' alignment_name '.fasta']);
disprot=fastaread(['Inputs/fasta/' disprot_id '.fasta']);
[alg_tmp,ats0]=trunc_al_disprot(algn,disprot);
alg0=char(alg_tmp.Sequence);    
hd=char(alg_tmp.Header);

%**************************************************
%saving variables. In this script, we save the relevant variables in a
%single output structure as we go to facilitate restarting the script at
%any step.

output.name=name;
output.sequence.alignment_name=alignment_name;
output.sequence.algn=algn;
eval([name '=output;']);
if ~exist(['Outputs/' name]), mkdir(['Outputs/' name]); end
eval(['save Outputs/' name '/' name ' ' name]);

% CORE 1a. MSA conditioning 

% The first step in SCA is to condition the alignment to remove sequences
% and positions with excessive gaps and to compute weights for each
% sequence to correct for the trivial over-representation of high-identity
% sequences. The programs filter_seq.m and filter_pos.m carry out these
% steps.  See Box 1 of the attached paper for the details of these
% pre-processing steps.  Here, we define the parameters for alignment
% conditioning.

max_fracgaps_seq=.2;
max_fracgaps_pos=.2;
min_seqid=.2;
max_seqid=.8;

% CORE 1b. MSA conditioning

[alg1,seqw,Meff,iseqkeep]=filter_seq(alg0,max_fracgaps_seq,min_seqid,max_seqid);
[alg,iposkeep,ats]=filter_pos(alg1,seqw,max_fracgaps_pos,ats0);
% dist=dist0(iposkeep,iposkeep);
hd = hd(iseqkeep,:);

%**************************************************
%saving variables
output.sequence.alg=alg;
output.sequence.header=hd;
output.sequence.ats=ats;
output.sequence.seqw=seqw;
output.sequence.Meff=Meff;
output.sequence.min_seqid=min_seqid;
output.sequence.max_seqid=max_seqid;
output.sequence.max_fracgaps_seq=max_fracgaps_seq;
output.sequence.max_fracgaps_pos=max_fracgaps_pos;
output.sequence.iseqkeep=iseqkeep;
output.sequence.iposkeep=iposkeep;

% output.structure.dist=dist;
output.structure.disprot_id=disprot_id;
% output.structure.chain_id=chain_id;
% output.structure.pdb=pdb;

eval([name '=output;']);
if ~exist(['Outputs/' name]), mkdir(['Outputs/' name]); end
eval(['save Outputs/' name '/' name ' ' name])

% CORE 2a. SCA - basic calculations 

% SCA calculations according to sections III and IV of the attached paper.

% First order statistics - section III.A.  The degree of conservation of
% amino acids at sequence positions is measured in SCA by an information
% theoretic quantity called the Kullback-Leibler relative entropy -
% D(f(a,i)||q(a) - Eq. xx). The function pos_weights.m makes this
% calculation, returning a 20 X N_pos matrix Dia of relative entropies of
% each amino acid at each position in the multiple sequence alignment.  A
% global measure of conservation is similarly measured by D(f(i)||q')
% (where q' takes into account gaps - Eq. xx), and this function returns
% this calculation in Di, a 1 X N_pos vector of positional conservation.

[N_seq,N_pos]=size(alg);N_aa=20;
[posw,Dia,Di]=pos_weights(alg,seqw);
Dia=reshape(Dia,N_aa,N_pos)';

% Second order statistics - sections III.B-C and IV.xx. The function sca6.m
% takes an alignment (alg) and the sequence weights (seqw) as inputs and
% returns a MATLAB structure with the following variables: (1) the
% dimension-reduced N_pos X N_pos SCA positional coevolution matrix C (Eq.
% xx), (2) the method of dimension reduction (default is the spectral
% norm), (3) the projection matrix ProjMat for alignment dimension
% reduction (Eq. xx), and (4) the projected 2D alignment matrix tX (Eq.
% xx), used for phylogenetic mapping - the mapping between the space of
% positional coevolution and the sequence space spanned by the alignment.

tic; disp(sprintf(['\nComputing SCA matrix...']));
SCA=sca6(alg,seqw); toc

% The next step is spectral decomposition - section IV.xx.  The function
% spect_analysis takes the output of sca6.m (the structure variable SCA),
% the alignment (alg), the maximum sequence identity allowed (max_seqid),
% and the number of randomization trials (N_random) and returns another
% MATLAB structure variable SA.  SA contains the following fields: (1)
% C_rnd, the averaged random coevolution matrix from N_random trials of
% scrambling the columns of the alignment (a manipulation that retains the
% composition of amino acids at positions but removes all coevolution
% signals), (2) ev, the eigenvalues of the SCA matrix, (3) V, the
% associated eigenvectors, (4) ev_rnd, the eigenvalues from the
% randomization trials, and (4) the associated random eigenvectors.
% N_random is set to 10 by default; this step can take some time,
% especially for large proteins.

N_random=10;
disp(sprintf(['\nRandom matrices...' num2str(N_random) ' iterations']));
SA=spect_analysis(SCA,alg,max_seqid,N_random);

%**************************************************
%saving variables
output.c1.Di=Di;
output.c1.Dia=Dia;
output.c1.posw=posw;
output.c2.SCA=SCA;
output.c2.SA=SA;

eval([name '=output;']);
if ~exist(['Outputs/' name]), mkdir(['Outputs/' name]); end
eval(['save Outputs/' name '/' name ' ' name '  -v7.3'])

SCApull=triu(SCA.C,1);

% binary functional contact matrix
L=[];
for i=1:length(SCApull);
    for j=1:length(SCApull);
        if SCApull(i,j)>0;
            L=cat(1,L,SCApull(i,j));
        end;
    end;
end;
average=mean(L);
stdev=std(L);
SCApullnodiag = SCApull+SCApull';
bincont = (SCApullnodiag>average + 3*(stdev));

% functional residues
rescont=sum(bincont);
funcressec=ats(rescont>0);
pyfunc=strjoin(funcressec,'+');

output.func.funcressec=funcressec;
output.func.pyfunc=pyfunc;

eval([name '=output;']);
if ~exist(['Outputs/' name]), mkdir(['Outputs/' name]); end
eval(['save Outputs/' name '/' name ' ' name])

end;
